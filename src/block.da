# https://people.csail.mit.edu/nickolai/papers/gilad-algorand-eprint.pdf
# The Block metadata is Implemented as per section 8.1 in the paper.
import datetime
from prettytable import PrettyTable
from H import H

class Block(object):
    def __init__(self, x, round_num=None, prev_hash=None, timestamp=None):
        self.__val = x
        self.__prev_hash = prev_hash
        self.__round = round_num
        self.__timestamp = str(datetime.datetime.now()) if timestamp is None and x is not None else timestamp

    def get_value(self):
        if self.__val is not None and len(self.__val) > 20:
            x = self.__val[:20]
            return x
        return self.__val

    def get_round(self):
        return self.__round

    def set_prev_hash(self, hash):
        self.__prev_hash = hash

    def get_prev_hash(self):
        return self.__prev_hash

    def get_timestamp(self):
        return self.__timestamp

    def __eq__(self, other):
        if self is other:
            return True
        elif type(self) != type(other):
            return False
        else:
            return (self.get_value() == other.get_value() and self.get_round() == other.get_round()
                    and self.get_prev_hash() == other.get_prev_hash() and self.get_timestamp() == other.get_timestamp())

    def __hash__(self):
        return hash(( self.__val, self.__prev_hash, self.__round, self.__timestamp))

    def __str__(self):

        table = PrettyTable(field_names=['Value', 'PreviousHash', 'MyHash', 'Round', 'Timestamp'])
        table.title = 'Block {}'.format(self.__round)
        table.add_row([self.get_value(), self.__prev_hash[:7], H(self)[:7], self.__round, self.__timestamp])

        return str(table)
        # return 'BlockObject: [Val = {}, PrevHash = {}, Round = {}, Timestamp = {}]'.\
        #     format(self.__val, self.__prev_hash[:7], self.__round, self.__timestamp)
