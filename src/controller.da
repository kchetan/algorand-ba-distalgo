import numpy as np
from block import Block
from H import H

class Controller(process):

    def setup(processes, params, context, n_traitors, stake_traitors=0.33, byzantine_proposer=False, pbp=False, monitor=None, block_size=0, chain_length=1):
        self.nprocs = len(processes)
        self.ps = processes
        self.ps_list = list(processes)
        self.context = context
        self.n_traitors = n_traitors
        self.n_honest = self.nprocs - n_traitors
        self.stake_traitors = stake_traitors if n_traitors > 0 else 0
        self.step = None
        self.curr_round = None
        self.W = dict()
        self.committee = None
        self.proposers = None

        self.block_size = block_size  # in KB
        self.num_committee = params.tau_step
        self.num_proposers = params.tau_proposer
        self.num_final_committee = params.tau_final
        self.results = dict()
        self.committees_created = dict()

        self.proposed_blocks = dict()
        self.blockofhash = dict()
        self.livenesscheck = dict()
        tr = np.random.choice(np.arange(0, self.nprocs), size=n_traitors, replace=False)
        self.traitors = {self.ps_list[i] for i in tr}
        self.honest_users = self.ps - self.traitors
        self.ps_list = list(self.honest_users) + list(self.traitors)
        output('Honest: {}'.format(self.honest_users), level=params.logger_level)
        output('Traitors: {}'.format(self.traitors), level=params.logger_level)
        self.pbp = pbp
        self.byzantine_proposer = byzantine_proposer
        self.monitor = monitor

        self.chain_length = chain_length

    def receive(msg=('Proposal', round_num, ps_id, block)):
        if round_num in self.proposed_blocks:
            self.proposed_blocks[round_num].add(block)
            self.blockofhash[round_num][H(block)] = block
        else:
            self.proposed_blocks[round_num] = {block}
            Empty = Block(None, round_num, self.context.prev_block())
            self.blockofhash[round_num] = {H(block):block,
                                           H(Empty):Empty}

    def receive(msg=('LivenessFailed', round_num), from_=p):
        self.livenesscheck[round_num].add(p)

    def receive(msg=('IsUserInCommittee', round_num, step, q), from_=p):
        if step == 'FINAL':
            self.committees_created[step] = Sortition(self.num_final_committee, round_num, step, 'Committee')
        elif step not in self.committees_created:
            self.committees_created[step] = Sortition(self.num_committee, round_num, step, 'Committee')

        if q in self.committees_created[step]:
            send(('InCommitteeReply', round_num, step, self.committees_created[step][q]), to=p)
        else:
            send(('InCommitteeReply', round_num, step, 0), to=p)

    def receive(msg=('IsUserProposer', round_num, q), from_=p):
        if self.curr_round is None or self.curr_round < round_num:
            Sortition(self.num_proposers, round_num, None, 'Proposers')
        send(('IsProposerReply', round_num, int(q in self.proposers)), to=p)

    def receive(msg=('WhatIsBlock', block_hash), from_=p):
        if block_hash in self.blockofhash[self.curr_round]:
            send(('BlockOfHashIs', block_hash, self.blockofhash[block_hash]), to=p)

    def Sortition(num_role, round, step, role):
        """

        This function is a reinterpretation of the Algorand Sortition algorithm. Instead of relying upon a VRF 
        to allow users to know whether they are committee members, proposers, or just replicas, at each step/round, we
        generate a list of members for each role the first time this function is called at each step/round.
        Committee Members are chosen according to a set of weights generated randomly each step. The committee
        members can cast multiple votes, and hence, are chosen using a Normal random process. 
        Proposers are sampled randomly from the set of nodes in self.ps.

        @param num_role: Number of processes needed by calling function for given role
        @type num_role: int
        @param round: Round number for performing proposer selection. No effect on committee selection
        @type round: int
        @param step: Step number for performing committee selection.
            No effect on proposer selection
        @type step: int
        @param role: Role for which users are being chosen: Proposer or Committee.
            No other roles are accepted.
        @type role: str
        @return: List consisting of all node names
            assigned to "role"
        """
        assert role.lower() in 'committee' or role.lower() in 'proposers',\
            '[controller.da] Unrecognized role name given to Sortition'
        if role.lower() in 'committee':
            assert self.step is None or type(step) is str or type(self.step) is str or self.step == step or self.step == step - 1, \
                '[controller.da] Sortition generated committee for step {}, but curr step is {}'.format(self.step, step)
            if self.step is None or self.step != step or self.step < step:
                output('Committee Sortition Requirements Satisfied', level=params.logger_level)
                # selection = list(np.random.choice(np.arange(0, self.nprocs), size=num_role, replace=True, p=self.W[round]))
                comm_traitors = int(num_role*self.stake_traitors)
                weight_traitors = np.array(self.W[round][self.n_honest:]) / sum(self.W[round][self.n_honest:])
                comm_honest = num_role - comm_traitors
                weight_honest = np.array(self.W[round][:self.n_honest]) / sum(self.W[round][:self.n_honest])

                honest_idx, traitor_idx = list(), list()
                if self.n_honest > 0:
                    honest_idx = list(np.random.choice(np.arange(0, self.n_honest),
                                                       size=comm_honest,
                                                       p=weight_honest))
                if self.n_traitors > 0:
                    traitor_idx = list(np.random.choice(np.arange(self.n_honest, self.nprocs),
                                                        size=comm_traitors,
                                                        p=weight_traitors))

                output('honest_idx = {}'.format(honest_idx), level=params.logger_level)
                output('traitor_idx = {}'.format(traitor_idx), level=params.logger_level)
                selection = honest_idx + traitor_idx
                self.committee = {self.ps_list[i]:selection.count(i) for i in set(selection)}
                self.step = step
                output('Finished Committee Sortition - STEP: {}'.format(step), level=params.logger_level)
                output('Committee at STEP {} = {}'.format(step, self.committee), level=params.logger_level)
            return self.committee

        elif role.lower() in 'proposers':
            assert self.curr_round is None or self.curr_round == round or self.curr_round == round - 1, \
                '[controller.da] Sortition generated proposers for round {}, but curr round is {}'.format(self.curr_round,
                                                                                                          round)
            if self.curr_round is None or self.curr_round < round:
                p = set(np.random.choice(np.arange(0, self.nprocs), size=num_role, replace=True, p=self.W[round]))
                self.proposers = {self.ps_list[i] for i in p}
                self.curr_round = round
            return self.proposers

    def VerifySort(proc_id):
        """

        This function is a reinterpretation of the Algorand VerifySort algorithm. Instead of relying upon a VRF
        to independently allow users to know how many votes a committee member is allowed to cast, we allow them to
        query the controller for this information.

        @param proc_id: The node ID which is being verified.
        @return: Number of votes assigned to proc_id.

        """
        if self.committee and proc_id in self.committee:
            return self.committee[proc_id]
        return 0

    def receive(msg= ('result', result), from_=p):
        self.results[p] = (str(result[0]) if type(result[0]) is Block else result[0], result[1])
        send(('Received result',), to=p)

    def isEmptyBlock(block:Block):
        return block.get_round() == self.curr_round and block.get_value() == None and block.get_timestamp() == None \
            and block.get_prev_hash() == H(self.context.prev_block())

    def distribute_stakes(num_indices: int, total_stake: float):
        if num_indices == 0:
            return list()

        stakes = list()
        for i in range(num_indices-1):
            stakes.append(np.random.uniform(0, total_stake))
            total_stake -= stakes[-1]
        stakes.append(total_stake)
        return stakes

    def initialize_stakes(round_num):
        if round_num not in self.W:
            honest_stakes = distribute_stakes(self.n_honest, 1 - self.stake_traitors)
            traitor_stakes = distribute_stakes(self.n_traitors, self.stake_traitors)

            self.W[round_num] = honest_stakes + traitor_stakes
            output('Stakes: {}'.format({self.ps_list[i]:self.W[round_num][i] for i in range(0, self.nprocs)}), level=params.logger_level)
        return self.W[round_num]

    def run():

        send(('YouAreTraitor',), to=self.traitors)
        agr, val, liv = True, True, True
        round_number = 0
        while round_number < self.chain_length and agr and liv and val:
            initialize_stakes(round_number)
            self.livenesscheck[round_number] = set()
            proposerSet = Sortition(self.num_proposers, round_number, None, 'Proposer')
            if self.byzantine_proposer and not self.pbp:
                max_prop_id = max(proposerSet)
                send(('Propose', self.curr_round), to=proposerSet-{max_prop_id})
                send(('ByzantinePropose', self.curr_round), to=max_prop_id)
            else:
                send(('Propose', self.curr_round), to=proposerSet)

            if await(False):
                pass
            elif timeout(params.lambda_block):
                pass

            send(('start_BA', round_number), to=self.ps)

            await(each(p in ps, has=received(('done', round_number), from_=p)))

            output('Results:', level=params.logger_level)
            tentative_blocks = set(block for status, block in self.results.values() if status == 'TENTATIVE')
            final_blocks = set(block for status, block in self.results.values() if status == 'FINAL')
            tentative_users = dict()
            final_users = dict()
            for user, (status, block) in self.results.items():
                if status == 'TENTATIVE':
                    if block in tentative_users:
                        tentative_users[block].append(user)
                    else:
                        tentative_users[block] = [user]
                else:
                    if block in final_users:
                        final_users[block].append(user)
                    else:
                        final_users[block] = [user]

            if len(tentative_blocks) == 0 and len(final_blocks) == 1:
                output('Consensus Reached', level=params.logger_level)
                for x in final_blocks:
                    print('Final Block:\n{}'.format(x))
            else:
                print('Tentative Blocks:')
                for block in tentative_blocks:
                    print('List of users with this block: {}'.format(tentative_users[block]))
                    print(block)
                print('Final Blocks:')
                for block in final_blocks:
                    print('List of users with this block: {}'.format(final_users[block]))
                    print(block)

            # Correctness Testing
            print("\n Correctness Testing")
            total_blocks = set(tentative_blocks).union(set(final_blocks))
            if len(total_blocks) != 1:
                self.context.set_forked_blocks({('TENTATIVE', block) for block in tentative_blocks}.union(
                    {('FINAL', block) for block in final_blocks}))
                print('1) Agreement Violated')
                agr = False
                if len(self.livenesscheck[round_number]) != 0:
                    liv = False
            else:
                print('1) Agreement Satisfied')
                for block in total_blocks:
                    if len(final_blocks):
                        self.context.add_block(('FINAL', block))
                    else:
                        self.context.add_block(('TENTATIVE', block))
                    if block in self.proposed_blocks[block.get_round()] or self.isEmptyBlock(block):
                        print('2) Validity Satisfied')
                    else:
                        print('2) Validity Violated')
                        val = False
                if len(self.livenesscheck[round_number]) == 0:
                    print('3) Liveness Satisfied\n')
                else:
                    print('3) Liveness Violated\n')
                    liv = False

            round_number += 1

        send(('ExitCondition',), to=self.ps)
        self.context.print_chain()

        send(('correctness', agr, val, liv, len(final_blocks) == 1), to=monitor or parent())
        send(('done',), to=parent())


