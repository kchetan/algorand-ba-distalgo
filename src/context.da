# https://people.csail.mit.edu/nickolai/papers/gilad-algorand-eprint.pdf
# The Context metadata is Implemented as per section 7.1 in the paper.
from H import H
from prettytable import PrettyTable

class Context():
    def __init__(self):
        self.__last_block = None
        self.__first_block = None
        self.__final_fork = False
        self.__block_of_hash = dict()
        self.__chain = []

    def add_block(self, block):
        if(not self.__last_block):
            self.__first_block = block[1]
        self.__last_block = block[1]
        self.__chain.append(block)
        self.__block_of_hash[H(block)] = block

    def prev_block(self):
        return self.__last_block

    def set_forked_blocks(self, blocks: set):
        self.__chain.append(blocks)
        self.__final_fork = True

    def is_forked(self):
        return self.__final_fork

    def get_chain(self):
        return self.__chain

    def print_chain(self):

        for status, block in self.__chain[:-1]:
            table = PrettyTable(field_names=['Value', 'PrevHash', 'MyHash', 'Round', 'Timestamp'])
            table.title = 'Block {} - {}'.format(block.get_round(), status)
            table.add_row([block.get_value(), block.get_prev_hash()[:7] if block.get_prev_hash() else None, H(block)[:7], block.get_round(), block.get_timestamp()])

            print(str(table))
            for i in range(3):
                print("\t\t\t\t|")
            print("\t\t\t\tV")

        if self.__final_fork:
            l = len(self.__chain[-1])
            table = PrettyTable(field_names=['Value', 'PrevHash', 'MyHash', 'Round', 'Timestamp']*l)
            table.title = 'Fork at Block {}'.format(len(self.__chain)-1)
            row = []
            for status, block in self.__chain[-1]:
                row += [block.get_value(), block.get_prev_hash()[:7] if block.get_prev_hash() else None, H(block)[:7], block.get_round(), block.get_timestamp()]
            table.add_row(row)
            print(str(table))
        else:
            status, block = self.__chain[-1]
            table = PrettyTable(field_names=['Value', 'PrevHash', 'MyHash', 'Round', 'Timestamp'])
            table.title = 'Block {} - {}'.format(block.get_round(), status)
            table.add_row(
                [block.get_value(), block.get_prev_hash()[:7] if block.get_prev_hash() else None, H(block)[:7],
                 block.get_round(), block.get_timestamp()])

            print(str(table))
