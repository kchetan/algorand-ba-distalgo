from controller import Controller
from algorand import User, create_gossip_neighbours, initial_context
from parameters import Parameters
import csv
import numpy as np
import time
from copy import deepcopy
import json

class Monitor(process):

    def setup():
        self.storage = [True, True, True]
        self.number = 0
        self.final = True
        self.times = []
        self.n_users = None
        self.n_traitors = None
        self.stake_traitors = None
        self.tau_step = None
        self.lambda_block = None
        self.lambda_step = None
        self.c_file = None
        self.c_csvwriter = None
        self.p_file = None
        self.p_csvwriter = None
        self.block_size = None
        self.labels = [ ['Number of Users ', 'Number of Users vs Latency'], 
                        ['% Malicious Users', ' % Malicious Users vs Latency'],
                        ['% Stake of Malicious Users', '% Stake of Malicious Users vs Latency'],
                        ['Committee Size', 'Committee Size vs Latency'],
                        ['Block Size (KB)', 'Block Size vs Latency']
                      ]
        self.plot_file = open('temp.json', 'w')
        self.plot_data = [[],[]]

    def receive(msg=('init_files',)):
        self.p_file = open('performance.csv', 'w')
        self.p_csvwriter = csv.writer(self.p_file, lineterminator='\n')
        self.p_csvwriter.writerow(['NumUsers', 'NumTraitors', 'BlockSize', 'CommitteeSize', 'TraitorStake', 'Consensus',
                        'Agreement', 'Validity', 'Liveness', 'Time'])

        self.c_file = open('correctness.csv', 'w')
        self.c_csvwriter = csv.writer(self.c_file, lineterminator='\n')
        self.c_csvwriter.writerow(['NumUsers', 'NumTraitors', 'TraitorStake', 'CommitteeSize',
                                'BlockSize', 'Consensus', 'Agreement', 'Validity', 'Liveness'])

    def receive(msg=('init_params', n_users, n_traitors, stake_traitors, tau_step, block_size)):
        self.n_users = n_users
        self.n_traitors = n_traitors
        self.stake_traitors = stake_traitors
        self.tau_step = tau_step
        self.block_size = block_size
        self.storage = [True, True, True]
        self.times = []

    def receive(msg=('correctness', agr, val, liv, final)):
        oldagr, oldval, oldliv = self.storage
        self.final = self.final and final
        self.storage = [agr and oldagr, val and oldval, liv and oldliv]

    def receive(msg=('performance', agr, val, liv, time)):
        oldagr, oldval, oldliv = self.storage
        self.times.append(time)
        self.storage = [agr and oldagr, val and oldval, liv and oldliv]

    def get_xaxis():
        switcher = { 0: self.n_users, 1: self.n_traitors*100.0/self.n_users, 2: self.stake_traitors * 100, 3: self.tau_step, 4: self.block_size} 
        return switcher[self.number]

    def receive(msg=('flush',)):
        consensus = 'Final' if self.final else 'Tentative'

        self.c_csvwriter.writerow([self.n_users, self.n_traitors*100.0/self.n_users, self.stake_traitors * 100, self.tau_step, self.block_size, consensus] 
            + self.storage)
        self.c_file.flush()

        print([self.n_users, self.n_traitors*100.0/self.n_users, self.block_size, self.tau_step, self.block_size, self.stake_traitors *100,
                                consensus] + self.storage + [round(sum(self.times)*1.0/len(self.times), 4)])
        self.p_csvwriter.writerow([self.n_users, self.n_traitors*100.0/self.n_users, self.block_size, self.tau_step, self.block_size, self.stake_traitors * 100,
                                consensus] + self.storage + [round(sum(self.times)*1.0/len(self.times), 4)])
        self.p_file.flush()

        self.plot_data[0].append(self.get_xaxis())
        self.plot_data[1].append(round(sum(self.times)*1.0/len(self.times), 4))

    def receive(msg=('plot',)):
        obj = {'x': self.plot_data[0], 'y': self.plot_data[1], 'xlabel' : self.labels[self.number][0], 'ylabel': 'Latency (s)', 'title': self.labels[self.number][1]}
        self.plot_file.write(json.dumps(obj) + '\n')
        self.plot_file.flush()
        self.number +=1
        self.plot_data = [[],[]]

    def run():
        await(received(('done',), from_=parent()))


def main():
    params = Parameters()
    monitor = new(Monitor,())
    start(monitor)
    send(('init_files',), to=monitor)

    template = [30, 5, 0.25, 10, 0]

    n_users_vals = range(20, 51, 10)
    n_traitors_vals = range(0, 17, 4)
    traitor_stake_vals = [float(x) for x in np.concatenate([np.arange(0, 0.33, 0.06), np.array([0.33, 0.34])])]
    tau_step_vals = range(5, 21, 5)
    block_size_vals = [float(x) for x in np.linspace(0, 3, 7)]

    value_lists = [n_users_vals, n_traitors_vals, traitor_stake_vals, tau_step_vals, block_size_vals]

    for i in range(5):
        values = deepcopy(template)
        for val in value_lists[i]:
            values[i] = val
            for _ in range(3):
                n_users, n_traitors, traitor_stake, params.tau_step, block_size = values
                params.tau_final = params.tau_step
                output(n_users, n_traitors, traitor_stake, params.tau_step, block_size)
                send(('init_params', n_users, n_traitors, traitor_stake, params.tau_step, block_size), to=monitor)
                context = initial_context()
                ps = new(User, num=n_users)
                ctrl = new(Controller, (ps, params, context, n_traitors, traitor_stake, False, True, monitor, block_size))

                users_list = list(ps)
                for p in ps:
                    neighbours_set = create_gossip_neighbours(users_list, p)
                    setup(p, (neighbours_set, params, ctrl, context, True, block_size))
                start(ps)
                start(ctrl)
                await(received(('done',), from_=ctrl))
            send(('flush',), to=monitor)
            time.sleep(1)
        send(('plot',), to=monitor)
        time.sleep(1)

    send(('done',), to=monitor)
